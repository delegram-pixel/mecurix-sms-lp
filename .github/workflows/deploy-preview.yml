name: Deploy Preview (Backend + Frontend)

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.vercel-url.outputs.VERCEL_URL }}
    steps:
      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          repository: Abdullah-988/penwwws-backend
          token: ${{ secrets.GITHUB_TOKEN }}
          path: backend

      - name: Set up Bun.js
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.0

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: bun install

      - name: Install Vercel CLI
        run: bun install -g vercel@latest

      - name: Install Neon CLI
        run: bun install -g neonctl

      - name: Create or Retrieve Neon Database Branch
        id: neon-branch
        run: |
          BRANCH_NAME="pr-${{ github.event.pull_request.number }}"

          # Check if the branch already exists
          BRANCH_EXISTS=$(neonctl branches list --api-key ${{ secrets.NEON_TOKEN }} \
            --project-id ${{ secrets.NEON_PROJECT_ID }} \
            2>/dev/null | grep -c "$BRANCH_NAME" || true)

          if [ "$BRANCH_EXISTS" -eq 0 ]; then
            echo "Creating new Neon database branch: $BRANCH_NAME"
            neonctl branches create --api-key ${{ secrets.NEON_TOKEN }} --project-id ${{ secrets.NEON_PROJECT_ID }} --name $BRANCH_NAME
          else
            echo "Neon database branch already exists: $BRANCH_NAME"
          fi

          # Retrieve the connection string
          DB_URL=$(neonctl connection-string --api-key ${{ secrets.NEON_TOKEN }} \
            --project-id ${{ secrets.NEON_PROJECT_ID }} \
            --branch $BRANCH_NAME)

          echo "DATABASE_URL=${DB_URL}" >> $GITHUB_ENV
          echo "DB_URL=$DB_URL" >> $GITHUB_OUTPUT

      - name: Generate JWT_SECRET
        id: jwt-secret
        run: |
          JWT_SECRET=$(openssl rand -base64 32)
          echo "JWT_SECRET=${JWT_SECRET}" >> $GITHUB_ENV
          echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_OUTPUT

      - name: Run Prisma Migrations and Seed
        working-directory: ./backend
        run: |
          bunx prisma db push --force-reset
          bunx prisma db seed
          bunx prisma generate

      - name: Pull Vercel Environment Information
        working-directory: ./backend
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ./backend
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Backend to Vercel (Preview)
        working-directory: ./backend
        id: vercel-url
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          DEPLOY_ALIAS="penwwws-backend-from-frontend-pr-$PR_NUMBER.vercel.app"
          vercel deploy --prebuilt \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope abdullah-abdulkareems-projects-0896f126 \
            --env DATABASE_URL=${{ env.DATABASE_URL }} \
            --env JWT_SECRET="${{ env.JWT_SECRET }}" \
            --env NODEMAILER_SERVICE=${{ secrets.NODEMAILER_SERVICE }} \
            --env NODEMAILER_EMAIL=${{ secrets.NODEMAILER_EMAIL }} \
            --env NODEMAILER_EMAIL_ALIAS=${{ secrets.NODEMAILER_EMAIL_ALIAS }} \
            --env NODEMAILER_PASSWORD="${{ secrets.NODEMAILER_PASSWORD }}" \
            --env CLOUDINARY_UPLOAD_PRESET="${{ secrets.CLOUDINARY_UPLOAD_PRESET }}" \
            --env CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }} \
            --env CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} \
            --env CLOUDINARY_API_SECRET="${{ secrets.CLOUDINARY_API_SECRET }}" \
            --yes \
            --regions fra1 &> vercel-output-backend
          BACKEND_DEPLOY_URL=$(cat vercel-output-backend | grep 'Preview:' | awk '{print $2}')
          vercel alias set $BACKEND_DEPLOY_URL $DEPLOY_ALIAS --token=${{ secrets.VERCEL_TOKEN }}

          BACKEND_URL="https://$DEPLOY_ALIAS"

          echo "Backend deployed with URL: $BACKEND_URL"
          echo "VERCEL_URL=${BACKEND_URL}" >> $GITHUB_ENV
          echo "VERCEL_URL=$BACKEND_URL" >> $GITHUB_OUTPUT

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    permissions:
      pull-requests: write
    steps:
      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set up Bun.js
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.0

      - name: Install Frontend Dependencies
        run: bun install

      - name: Install TailwindCSS Dependencies
        run: bun install lightningcss-linux-x64-gnu @tailwindcss/oxide-linux-x64-gnu sass-embedded-linux-x64

      - name: Install Vercel CLI
        run: bun install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        env:
          NEXT_PUBLIC_BACKEND_URL: ${{ needs.deploy-backend.outputs.backend-url }}
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Frontend to Vercel (Preview)
        id: frontend-deploy
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          DEPLOY_ALIAS="penwwws-frontend-pr-$PR_NUMBER.vercel.app"
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} \
            --scope abdullah-abdulkareems-projects-0896f126 \
            --yes --regions fra1 &> vercel-output-frontend
          FRONTEND_DEPLOY_URL=$(cat vercel-output-frontend | grep 'Preview:' | awk '{print $2}')
          vercel alias set $FRONTEND_DEPLOY_URL $DEPLOY_ALIAS --token=${{ secrets.VERCEL_TOKEN }}

          FRONTEND_URL="https://$DEPLOY_ALIAS"

          echo "Frontend deployed with URL: $FRONTEND_URL"
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_OUTPUT

      - name: Update Pull Request with Frontend Preview URL
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          FRONTEND_URL="${{ steps.frontend-deploy.outputs.FRONTEND_URL }}"

          # Get the current PR body
          PR_BODY=$(gh pr view $PR_NUMBER --json body -q '.body')

          # Check if the placeholder exists
          if [[ "$PR_BODY" == *"<!--- live-Preview -->"* ]]; then
            # Use awk to replace the line after the placeholder
            UPDATED_BODY=$(echo "$PR_BODY" | awk -v url="$FRONTEND_URL" '/<!--- live-Preview -->/ { print; getline; print url; next } { print }')
          else
            # If placeholder is missing, append it at the bottom
            UPDATED_BODY="$PR_BODY\n\n<!--- live-Preview -->\n$FRONTEND_URL"
          fi

          # Update the PR body
          gh pr edit $PR_NUMBER --body "$UPDATED_BODY"
